#!/bin/bash

GIT_REPO_URI=/var/git/repositories/megaadmins/chef.git
HOOK_DIR=/var/git/gitlab-shell/hooks
CHEF_SERVER=mgmt01.undev.cc
KNIFE="knife"

function _exit() {
  local code=$1
  rm -rf $work_dir
  exit $code
}

function _error() {
  local err=$?
  current_dir=$(pwd -P)

  echo "ERROR" "************************************"
  echo "ERROR" "Info:"
  echo "ERROR" " * Current dir : $current_dir"
  echo "ERROR" " * Command     : $BASH_COMMAND"
  echo "ERROR" " * Error       : $err"
  echo "ERROR" " * Line        : $BASH_LINENO"
  echo "ERROR" "************************************"

  _exit 1
}

function get_cookbook_version() {
  local commit=$1
  local cookbook_name=$2

  OLD_GIT_DIR=$GIT_DIR
  unset GIT_DIR

  content=$(git show $commit:cookbooks/$cookbook_name/metadata.rb)
  if [ $? -ne 0 ]; then
    echo ""
  else
    version=$(echo -e "$content" | grep 'version' | awk '{ print $2; }' \
     | sed s'/"//g' | sed s"/'//g")
    echo $version
  fi

  GIT_DIR=$OLD_GIT_DIR
}

trap _error ERR

while read old_version new_version ref_name; do
  # sort используется для того чтобы сначала удалить, потом зааплоадить
  changes=$(git diff-tree --numstat $old_version $new_version | sort -n | awk '{ print $3; }')

  declare -a changed_cookbooks
  declare -a changed_roles
  declare -a changed_envs

  for file in $changes; do
    name=$(echo $file | awk -F\/ '{ print $2; }')

    case $file in
      cookbooks/*)
        changed_cookbooks+=( $name )
      ;;
      roles/*)
        changed_roles+=( $file )
      ;;
      environments/*)
        changed_envs+=( $file )
      ;;
    esac
  done

  if [ ${#changed_cookbooks[@]} -gt 0 ] || [ ${#changed_roles[@]} -gt 0 ] || [ ${#changed_envs[@]} -gt 0 ]; then

    work_dir="/tmp/$$"
    mkdir -p $work_dir/git_repo
    git clone $GIT_REPO_URI $work_dir/git_repo &>/dev/null
    cd $work_dir/git_repo

    git --git-dir=$work_dir/git_repo/.git checkout $new_version &>/dev/null

    echo "=> Upload changes to $CHEF_SERVER... "

    for cookbook in $(printf "%s\n" ${changed_cookbooks[@]} | sort | uniq ); do
      if [ -d cookbooks/$cookbook ]; then
        echo "=> Upload cookbook: $cookbook"
        trap - ERR

        new_cookbook_version=$(get_cookbook_version $new_version $cookbook)
        old_cookbook_version=$(get_cookbook_version $old_version $cookbook)

        if [[ "$old_cookbook_version" > "$new_cookbook_version" ]]; then
          echo -e "=> \e[1m\e[31mATTENTION! You need to bump the cookbook version: $cookbook\e[0m"
          _exit 1
        fi

        if [ "$old_cookbook_version" = "$new_cookbook_version" ]; then
          echo -e "=> \e[1m\e[31mATTENTION! You need to bump the cookbook version: $cookbook\e[0m"
          _exit 1
        fi

        res=""
        res=$($KNIFE cookbook upload -o ./cookbooks $cookbook --freeze 2>&1 | tee /dev/stderr | grep 'ERROR')
        if [ "$res" != "" ]; then
          _exit 1
        fi
      else
        echo "=> Delete cookbook: $cookbook"
        $KNIFE cookbook delete -y $cookbook -a
        ruby $HOOK_DIR/wiki-doc.rb $cookbook --delete
      fi
    done

    for role in $(printf "%s\n" ${changed_roles[@]} | uniq ); do
      if [ -f $role ]; then
        echo "=> Upload role: $(basename $role .rb)"
        $KNIFE role from file $role
      else
        echo "=> Delete role: $(basename $role .rb)"
        $KNIFE role delete -y $(basename $role .rb)
      fi
    done

    for env in $(printf "%s\n" ${changed_envs[@]} | uniq ); do
      if [ -f $env ]; then
        echo "=> Upload env: $(basename $env .rb)"
        $KNIFE environment from file $env
      else
        echo "=> Delete env: $(basename $env .rb)"
        $KNIFE environment delete -y $(basename $env .rb)
      fi
    done

  cd /tmp
  rm -Rf ${work_dir}
  fi

done < /dev/stdin
